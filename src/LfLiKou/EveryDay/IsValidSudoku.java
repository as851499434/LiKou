package LfLiKou.EveryDay;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * @Author: liangfan
 * @Date: 2021-12-23 09:15
 * @Description: 有效的数独
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * <p>
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 * <p>
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * {{'.','.','.','.','5','.','.','1','.'},
 * {'.','4','.','3','.','.','.','.','.'},
 * {'.','.','.','.','.','3','.','.','1'},
 * {'8','.','.','.','.','.','.','2','.'},
 * {'.','.','2','.','7','.','.','.','.'},
 * {'.','1','5','.','.','.','.','.','.'},
 * {'.','.','.','.','.','2','.','.','.'},
 * {'.','2','.','9','.','.','.','.','.'},
 * {'.','.','4','.','.','.','.','.','.'}}
 * false
 */

public class IsValidSudoku {
    public static void main(String[] args) {
        char[][] board =
                   {{'.','.','.','.','5','.','.','1','.'},
   {'.','4','.','3','.','.','.','.','.'},
   {'.','.','.','.','.','3','.','.','1'},
   {'8','.','.','.','.','.','.','2','.'},
   {'.','.','2','.','7','.','.','.','.'},
   {'.','1','5','.','.','.','.','.','.'},
   {'.','.','.','.','.','2','.','.','.'},
   {'.','2','.','9','.','.','.','.','.'},
   {'.','.','4','.','.','.','.','.','.'}};
//                {{'5', '3', '.', '.', '7', '.', '.', '.', '.'}
//                        , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
//                        , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
//                        , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
//                        , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
//                        , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
//                        , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
//                        , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
//                        , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        System.out.println(isValidSudoku(board));

    }

    //哈希表  难点在与3*3 矩阵的位置  3*3位置矩阵算式：i/3 * 3 + j/3
    public static boolean isValidSudoku(char[][] board) {
        Map<Integer, Set<Character>> row  = new HashMap<>(), col = new HashMap<>(), area = new HashMap<>();
        for (int i = 0; i < 9; i++) {
            row.put(i, new HashSet());
            col.put(i, new HashSet<>());
            area.put(i, new HashSet<>());
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c == '.')  continue;
                int areaId = i/3 * 3 + j/3;
                if (row.get(i).contains(c) || col.get(i).contains(c) || area.get(areaId).contains(c)) return false;
                row.get(i).add(c);
                col.get(j).add(c);
                area.get(areaId).add(c);
            }
        }
        return true;
    }
}
